What happens when you initialize a repository? Why do you need to do it?

	.git hidden directory is created in the directory, where we initialized a repository. We need the folder to store
all commits, but in fact it stores all changes made to the files. We need to do it to start saving the history, i.e. doing
version-control, which git is used for. 

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	Maybe it's the area, which helps to save several versions of the files before actually committing them.
	Maybe it helps to save the file if you introduced some changes, but if they aren't logical enough to commit or too small, then you can just hold it there until the moment the change is good enough to commit.
	Maybe it helps to collect the files conveniently first and then commit them all at once.

How can you use the staging area to make sure you have one commit per logical
change?
	
	The only idea I can come up with is if we change like dozens of files per one session, and then we want to break them down into several logical parts, we can use staging area to do that. E.g. add a few changed files to the staging area, then commit them; then add the rest, then commit them.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	Branching is a good way to be able to introduce some experimental features such as another language version, easier or somehow modified version. It will also help to add some features, which you are not sure will work or not, while you can do some clearer modifications to the master branch, which you are confident about. Seems like it's not about the history, but about the inevitability of using branches in some situations

How do the diagrams help you visualize the branch structure?

	The diagrams help visualize the branch structure by representing the child-parent relationship between commits. Starting from the most recent commit on each branch, the ancestor commits are the only ones which can be reached from the most recent commits. When we checkout at some prevous commits, we receive a warning of being in HEAD-detached state, which means that any changes or commits made starting from now will be possessed by the new branch, which will be lost (I don't know whether it's competely lost or we "lose" it by not remembering the ID) unless we create a new branch and check out there.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?