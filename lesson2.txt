What happens when you initialize a repository? Why do you need to do it?

	.git hidden directory is created in the directory, where we initialized a repository. We need the folder to store
all commits, but in fact it stores all changes made to the files. We need to do it to start saving the history, i.e. doing
version-control, which git is used for. 

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	Maybe it's the area, which helps to save several versions of the files before actually committing them.
	Maybe it helps to save the file if you introduced some changes, but if they aren't logical enough to commit or too small, then you can just hold it there until the moment the change is good enough to commit.
	Maybe it helps to collect the files conveniently first and then commit them all at once.

How can you use the staging area to make sure you have one commit per logical
change?
	
	The only idea I can come up with is if we change like dozens of files per one session, and then we want to break them down into several logical parts, we can use staging area to do that. E.g. add a few changed files to the staging area, then commit them; then add the rest, then commit them.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	Branching is a good way to be able to introduce some experimental features such as another language version, easier or somehow modified version. It will also help to add some features, which you are not sure will work or not, while you can do some clearer modifications to the master branch, which you are confident about. Seems like it's not about the history, but about the inevitability of using branches in some situations

How do the diagrams help you visualize the branch structure?

	The diagrams help visualize the branch structure by representing the child-parent relationship between commits. Starting from the most recent commit on each branch, the ancestor commits are the only ones which can be reached from the most recent commits. When we checkout at some prevous commits, we receive a warning of being in HEAD-detached state, which means that any changes or commits made starting from now will be possessed by the new branch, which will be lost (I don't know whether it's competely lost or we "lose" it by not remembering the ID) unless we create a new branch and check out there.
	The unreachable commits can be reached by the commit ID only until the moment when Git Garbage Collection runs and all unreachable commits are deleted.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	When we run git log on the merged branch, it shows the commits of the branches which combine there sorted by timestamps. It seems a bit dangerous for me since when we compare 2 subsequent commits, their git diff will be not really understandable, since they can appear to be from 2 different branches.
	The result is the version of the program containing modifications added by both branches. It is useful to note that the changes deleted by some of the branches in comparison to the origin will be indeed deleted. The logic here is that they might have been deleted not to cause any bugs / non-needed features. On the other hand, changes added only by one of the branches will be added to the merged version.
	We represent it the way we do since we COMBINE the features of both branches rather than updating one of them to the other.
	There might be several problems with LF and CRLF, so using git diff to see which changes have been introduced and to check that no merging conflicts are present is a good habit to do before merging two branches.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

	Git automatically checks whether two branches can be merged without any conflicts or whether there is some conflict that has to be resolved. Then, it also clearly points out what was the reason for the conflict so that we can quickly correct it.
	When doing manually, there will be no conflicts, since we will check everytihng on our own, however, it's so difficult to do and takes so much time that it will be very tedious. One big disadvantage of automatic merging is that sometimes during editing of the file, we cannot understand whether some lines of code were present there before or whether one of the programmers added them so that they appeared in the final version of the code.

What I've found out is that the commit is more solid idea rather than the branch. The commit is the version of the code with its changes, which is stored somewhere, whereas branch just refers to the commit. Branch_name always refers to the latest commit on this branch (to the tip of the branch). git log and git diff operate both on commits and on branches, but in fact when we paste the branch_name as the argument, it just refers to the latest commit.

I wrote the commit message in the wrong style, so I'll have to change it.